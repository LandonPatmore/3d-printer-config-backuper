import subprocess
from shutil import copytree
from shutil import copyfile

from crontab import CronTab
from git import Repo

from github_arbiter import GithubArbiter

class SetupArbiter :
  def __init__(self, github_arbiter: GithubArbiter) :
    self.github_arbiter: GithubArbiter = github_arbiter

  def run(
      self,
      name: str,
      email: str,
      repository_name: str,
      repository_visibility: bool,
      printer_config_path: str,
      auto_commit_schedule: str
  ) :
    SetupArbiter.backup_printer_config_folder(
      printer_config_path=printer_config_path
    )

    ssh_key = SetupArbiter.generate_ssh_key(email)
    self.upload_ssh_key_to_github(ssh_key=ssh_key)

    origin_remote_url = self.create_repo_on_github(
      repo_name=repository_name,
      is_private=repository_visibility
    )

    SetupArbiter.create_and_push_local_repo(
      printer_config_path=printer_config_path,
      name=name,
      email=email,
      origin_remote_url=origin_remote_url
    )

    SetupArbiter.setup_auto_commit_schedule(
      auto_commit_schedule=auto_commit_schedule,
      printer_config_path=printer_config_path
    )

  @staticmethod
  def backup_printer_config_folder(printer_config_path: str) :
    copytree(src=printer_config_path, dst=f'{printer_config_path}_backup')

  @staticmethod
  def create_and_push_local_repo(
      name: str,
      email: str,
      printer_config_path: str,
      origin_remote_url: str
  ) :
    repo = Repo.init(path=printer_config_path, mkdir=False)
    remote_to_delete = repo.remote("origin")
    repo.delete_remote(remote=remote_to_delete)
    repo.create_remote(name="origin", url=origin_remote_url) # TODO: need to
    # cover case if it exists already (delete and remake)

    with repo.config_writer() as config :
      config.add_section("user")
      config.set("user", "name", name)
      config.set("user", "email", email)
      config.release()

    repo.index.add("*")
    repo.index.commit("initial commit from 3dbakup script")
    repo.git.push('--set-upstream', repo.remote().name, "master")

  @staticmethod
  def generate_ssh_key(email: str) -> str :
    subprocess.run(["./ssh_script.sh", email])
    with open(file="/home/dietpi/.ssh/id_rsa.pub", mode="r") as ssh_key :
      return ssh_key.read().rstrip("\n")

  def upload_ssh_key_to_github(self, ssh_key: str) :
    self.github_arbiter.github.get_user().create_key(
      title="Git SSH key (generated by 3dbakup)",
      key=ssh_key
    )

  def create_repo_on_github(self, repo_name: str, is_private: bool) -> str :
    return self.github_arbiter.github.get_user().create_repo(
      name=repo_name,
      description="This repository was generated by 3dbackup script located"
                  " at: https://github.com/LandonPatmore/3dbackup",
      private=is_private
    ).ssh_url

  @staticmethod
  def setup_auto_commit_schedule(
      auto_commit_schedule: str,
      printer_config_path: str
  ) :
    copyfile(src="./autocommit.sh", dst="/home/dietpi/autocommit.sh")

    with CronTab(user=True) as cron :
      job = cron.new(command=f'~/autocommit.sh {printer_config_path}')
      job.setall(auto_commit_schedule)
